$(function(){function e(){var e;clearInterval(v),v=setInterval(function(){e=f+1,e=e>$(".sliderBanner ol li").length-1?0:e,$(".sliderBanner ol li").eq(e).addClass("active").siblings().removeClass("active"),n(e,!1)},3e3)}function n(e,n){i(n,e,$(".sliderBanner ol li").length-1),clearTimeout(c),c=setTimeout(function(){s(e,$(".sliderBanner ol li").length-1)},600)}function i(e,n,i){if(n-f>1)n-f!=i||e?(r=n-1,o=f,u=n):(r=i,o=f,u=f+1);else if(-1>n-f)n-f!=-i||e?(r=n,o=f,u=n+1):(r=f-1,o=f,u=0);else if(n>f)r=0>=f?i:0,o=f,u=n;else{if(!(f>n))return;r=n,o=f,u=f>=i?0:i}a(r,o,u),t(e,n,f)}function s(e,n){0>=e?(r=n,o=e,u=e+1):e>=n?(r=e-1,o=e,u=0):(r=e-1,o=e,u=e+1),a(r,o,u),f=e}function a(e,n,i){$(".sliderBanner ul").css({transition:"transform 0s ease-in-out",transform:"translate3D(0,0,0)"}),$(".sliderBanner ul li").eq(e).addClass("prev").siblings().removeClass("prev"),$(".sliderBanner ul li").eq(n).addClass("active").siblings().removeClass("active"),$(".sliderBanner ul li").eq(i).addClass("next").siblings().removeClass("next")}function t(e,n,i){m=!0,d=n>i?"-100%":"100%",e||(d=0==n&&f==$(".sliderBanner ol li").length-1?"-100%":d,d=n==$(".sliderBanner ol li").length-1&&0==f?"100%":d),$(".sliderBanner ul").css({transition:"transform .6s ease-in-out",transform:"translate3D("+d+",0,0)"}),setTimeout(function(){m=!1},700)}function l(){var e;h-B>20?(autoIndex=f-1,autoIndex=autoIndex<0?$(".sliderBanner ol li").length-1:autoIndex,$(".sliderBanner ol li").eq(autoIndex).addClass("active").siblings().removeClass("active"),n(autoIndex,!1)):-20>h-B?(e=f+1,e=e>$(".sliderBanner ol li").length-1?0:e,$(".sliderBanner ol li").eq(e).addClass("active").siblings().removeClass("active"),n(e,!1)):$(".sliderBanner ul").css({transition:"transform .6s ease-in-out",transform:"translate3D(0,0,0)"})}var r,o,u,d,c,v,f=$(".sliderBanner ol li.active").index(),m=!1;e(),$(".sliderBanner").mouseover(function(){clearInterval(v)}).mouseout(function(){e()}),$(".sliderBanner ol li").click(function(){if(!m){var e=$(this).index();$(this).addClass("active").siblings().removeClass("active"),n(e,!0)}});var B,g,h,x,C;$(".sliderBanner").mousedown(function(e){e.preventDefault(),m||(B=h=e.originalEvent.x||e.originalEvent.layerX||0,g=x=e.originalEvent.y||e.originalEvent.layerY||0,C=!0)}),$(".sliderBanner").mouseup(function(e){C&&(l(),C=!1)}),$(".sliderBanner").mouseleave(function(e){C&&(l(),C=!1)}),$(".sliderBanner").mousemove(function(e){C&&(h=e.originalEvent.x||e.originalEvent.layerX||0,x=e.originalEvent.y||e.originalEvent.layerY||0,$(".sliderBanner ul").css({transition:"transform 0s ease-in-out",transform:"translate3D("+(h-B)+"px,0,0)"}))});var E=document.getElementById("sliderBanner");E.addEventListener("touchstart",function(e){m||(clearInterval(v),B=h=e.touches[0].clientX,g=x=e.touches[0].clientY,C=!0)},!1),E.addEventListener("touchmove",function(e){C&&(e.preventDefault(),h=e.changedTouches[0].clientX,x=e.changedTouches[0].clientY,$(".sliderBanner ul").css({transition:"transform 0s ease-in-out",transform:"translate3D("+(h-B)+"px,0,0)"}))},!1),E.addEventListener("touchend",function(n){C&&(e(),B!=h&&(l(),C=!1))},!1)});
//# sourceMappingURL=data:application/json;base64,
