"use strict";var _slicedToArray=function(){function r(r,o){var t=[],e=!0,a=!1,l=void 0;try{for(var i,n=r[Symbol.iterator]();!(e=(i=n.next()).done)&&(t.push(i.value),!o||t.length!==o);e=!0);}catch(_){a=!0,l=_}finally{try{!e&&n["return"]&&n["return"]()}finally{if(a)throw l}}return t}return function(o,t){if(Array.isArray(o))return o;if(Symbol.iterator in Object(o))return r(o,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();console.log("交换变量的值");var x=3,y=6,_ref=[y,x];x=_ref[0],y=_ref[1],console.log(x,y);var arr=function(){return[1,2,3]},obj=function(){return{foo:1,bar:2}};console.log("从函数返回多个值");var _arr=arr(),_arr2=_slicedToArray(_arr,3),a=_arr2[0],b=_arr2[1],c=_arr2[2];console.log(a,b,c);var _obj=obj(),foo=_obj.foo,bar=_obj.bar;console.log(foo,bar),console.log("函数参数的定义");var f=function(r){var o=_slicedToArray(r,3),t=o[0],e=o[1],a=o[2];console.log(t,e,a)};f([1,2,3]);var _f=function(r){var o=r.x,t=r.y,e=r.z;console.log(o,t,e)};_f({z:3,y:2,x:1}),console.log("提取JSON数据");var jsonData={id:42,status:"OK",data:[867,5309]},id=jsonData.id,status=jsonData.status,number=jsonData.data;console.log(id,status,number),console.log("函数参数的默认值"),jQuery.ajax=function(r,o){o.async,o.beforeSend,o.cache,o.complete,o.crossDomain,o.global},console.log("遍历Map结构");var map=new Map;map.set("first","hello"),map.set("second","world");var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=map[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],value=_step$value[1];console.log(key+" is "+value)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator["return"]&&_iterator["return"]()}finally{if(_didIteratorError)throw _iteratorError}}var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=map[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0)var _step2$value=_slicedToArray(_step2.value,1),key=_step2$value[0]}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2["return"]&&_iterator2["return"]()}finally{if(_didIteratorError2)throw _iteratorError2}}var _iteratorNormalCompletion3=!0,_didIteratorError3=!1,_iteratorError3=void 0;try{for(var _iterator3=map[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=!0)var _step3$value=_slicedToArray(_step3.value,2),value=_step3$value[1]}catch(err){_didIteratorError3=!0,_iteratorError3=err}finally{try{!_iteratorNormalCompletion3&&_iterator3["return"]&&_iterator3["return"]()}finally{if(_didIteratorError3)throw _iteratorError3}}console.log("字符的Unicode表示法"),console.log("𠮷"),console.log("ABC"),console.log("字符串的遍历器接口");var _iteratorNormalCompletion4=!0,_didIteratorError4=!1,_iteratorError4=void 0;try{for(var _iterator4="foo"[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=!0){var codePoint=_step4.value;console.log(codePoint)}}catch(err){_didIteratorError4=!0,_iteratorError4=err}finally{try{!_iteratorNormalCompletion4&&_iterator4["return"]&&_iterator4["return"]()}finally{if(_didIteratorError4)throw _iteratorError4}}console.log("确定一个字符串是否包含在另一个字符串中");var s="Hello world!";console.log(s.startsWith("Hello")),console.log(s.endsWith("!")),console.log(s.includes("o"));var s="Hello world!";s.startsWith("world",6),s.endsWith("Hello",5),s.includes("Hello",6),console.log("原字符串重复n次"),console.log("x".repeat(3)),console.log("hello".repeat(2)),console.log("na".repeat(0)),console.log("模板字符串");var maxPenalty="world",template="\n      <h1>Watch out "+maxPenalty+"!</h1>\n      <h1>Watch out "+maxPenalty+"!</h1>\n      <h1>Watch out "+maxPenalty+"!</h1>\n    ";console.log(template),console.log("将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）");var arrayLike={0:"a",1:"b",2:"c",length:3},arr1=[].slice.call(arrayLike),arr2=Array.from(arrayLike);console.log(arr2),Array.from("hello");var namesSet=new Set(["a","b"]);Array.from(namesSet),Array.from([1,2,3]),console.log("Array.of方法用于将一组值，转换为数组"),console.log(Array.of()),console.log(Array.of(void 0)),console.log(Array.of(1)),console.log(Array.of(1,2)),console.log("数组实例的find()和findIndex()"),console.log([1,5,10,15].find(function(r,o,t){return r>9})),console.log([1,5,10,15].findIndex(function(r,o,t){return r>9})),console.log("数组实例的entries()，keys()和values()");var _iteratorNormalCompletion5=!0,_didIteratorError5=!1,_iteratorError5=void 0;try{for(var _iterator5=["a","b"].keys()[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=!0){var index=_step5.value;console.log(index)}}catch(err){_didIteratorError5=!0,_iteratorError5=err}finally{try{!_iteratorNormalCompletion5&&_iterator5["return"]&&_iterator5["return"]()}finally{if(_didIteratorError5)throw _iteratorError5}}for(var _arr3=["a","b"],_i=0;_i<_arr3.length;_i++){var elem=_arr3[_i];console.log(elem)}var _iteratorNormalCompletion6=!0,_didIteratorError6=!1,_iteratorError6=void 0;try{for(var _iterator6=["a","b"].entries()[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=!0){var _step6$value=_slicedToArray(_step6.value,2),_index=_step6$value[0],_elem=_step6$value[1];console.log(_index,_elem)}}catch(err){_didIteratorError6=!0,_iteratorError6=err}finally{try{!_iteratorNormalCompletion6&&_iterator6["return"]&&_iterator6["return"]()}finally{if(_didIteratorError6)throw _iteratorError6}}var log=function(r){var o=arguments.length<=1||void 0===arguments[1]?"World":arguments[1];console.log(r,o)};console.log("函数参数的默认值"),log("Hello"),log("Hello","China"),log("Hello",""),console.log("箭头函数");var _a=function(r){console.log(r)},_b={hello:function(){return"hello"}};
//# sourceMappingURL=data:application/json;base64,
